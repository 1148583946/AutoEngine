#version 330 core
out vec4 FragColor;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

struct Material {
	vec3 color;
    vec3 diffuse;
    vec3 specular;
    float shininess;

}; 
struct DirLight {
	vec3 color;
	vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
struct PointLight {
	vec3 color;
	vec3 position;

    float constant;
    float linear;
    float quadratic;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
struct SpotLight {
	vec3 color;
	vec3 position;

    vec3 direction;
    float cutOff;
    float outerCutOff;
  
    float constant;
    float linear;
    float quadratic;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;       
};

uniform Material material;
uniform DirLight dirLight;
uniform PointLight pointLight;
uniform SpotLight spotLight;

uniform vec3 lightPos;
uniform vec3 viewPos;

//vec3 CalcDirLight(DirLight light,vec3 normal ,vec3 viewDir);

void main()
{   
	// ambient				
    vec3 ambient = dirLight.color * dirLight.ambient * material.diffuse;	
  	
    // diffuse 
    vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(-dirLight.direction); 
    float diff = max(dot(norm, lightDir), 0.0);		
    vec3 diffuse = dirLight.diffuse * dirLight.color * (diff * material.diffuse);			
            
	// specular
    vec3 viewDir = normalize(viewPos - FragPos);					
    vec3 reflectDir = reflect(-lightDir, norm);						
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = dirLight.diffuse * dirLight.color * (spec * material.specular);    


    vec3 result = (ambient + diffuse + specular) * material.color;
    FragColor = vec4(result, 1.0);
}
/*
vec3 CalcDirLight(DirLight light,vec3 normal ,vec3 viewDir)
{
	
}*/