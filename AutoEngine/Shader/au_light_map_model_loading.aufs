#version 330 core
out vec4 FragColor;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

struct Material {
    sampler2D texture_diffuse1;
    vec3 specular;
    float shininess;
}; 

uniform Material material;

uniform vec3 ourColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{   
	// ambient
    float ambientStrength = 0.1;					
    vec3 ambient = ambientStrength * lightColor * texture(material.diffuse, TexCoords).rgb;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);		
    vec3 diffuse = lightColor  * diff * texture(material.diffuse, TexCoords).rgb;  
            
	// specular
    vec3 viewDir = normalize(viewPos - FragPos);					
    vec3 reflectDir = reflect(-lightDir, norm);						
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = lightColor * (spec * material.specular);    


    vec3 result = (ambient + diffuse + specular) * ourColor;
    FragColor = vec4(result, 1.0);
}